on: [push]
# TODO: Run build steps in parallel?
# TODO: Automatically update the kernel submodul
name: Linux mm selftests in virtme-ng
jobs:
  build-rootfs:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code without submodules
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Checkout mkosi
        run: git submodule update mkosi/

      - name: Install apt packages for mkosi
        id: apt-mkosi
        run: |
          sudo apt update && sudo apt install apparmor debian-archive-keyring

      - name: Build rootfs
        run: |
          sudo sysctl -w kernel.apparmor_restrict_unprivileged_unconfined=0
          sudo sysctl -w kernel.apparmor_restrict_unprivileged_userns=0

          # Produce the rootfs in build/rootfs
          mkosi/bin/mkosi -C rootfs

      - name: Upload rootfs artifact
        uses: actions/upload-artifact@v4
        with:
          name: rootfs
          path: rootfs

  build-kernel:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code with submodules
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Hash all submodule versions
        id: submodule_hash
        run: |
          git submodule foreach --recursive 'git rev-parse HEAD' \
            | sort | sha256sum | awk '{print $1}' > submodule_hash.txt
          echo "::set-output name=hash::$(cat submodule_hash.txt)"

      # This might seem pointless coz typically we should expect the kernel
      # version to change between runs (otherwise why are we running again?)
      # But it's useful for hacking on this config.
      - name: Cache/restore kernel build
        id: cache-kernel-build
        uses: actions/cache@v4
        with:
          path: build
          key: ${{ runner.os }}-dependencies-${{ steps.submodule_hash.outputs.hash }}-${{ hashFiles('build.sh') }}

      - name: Install apt packages for kernel build
        if: ${{ steps.cache-kernel-build.outputs.cache-hit != 'true' }}
        run: |
          sudo apt update && sudo apt install \
            build-essential libnuma-dev libcap-dev \
            ncurses-dev xz-utils libssl-dev bc flex libelf-dev bison

      - name: Build
        if: ${{ steps.cache-kernel-build.outputs.cache-hit != 'true' }}
        run: ./build.sh

      - name: Upload kernel artifact
        uses: actions/upload-artifact@v4
        with:
          name: kernel-build
          path: build/

  test:
    runs-on: ubuntu-24.04
    needs: [build-rootfs, build-kernel]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false

      - name: Checkout virtme-ng
        run: git submodule update virtme-ng/

      - name: Download rootfs artifact
        uses: actions/download-artifact@v4
        with:
          name: rootfs
          path: build/rootfs

      # GHA freaks out if we try to upload the rootfs as a directory so at the
      # moment it's a tarball. So extract it.
      - name: Download rootfs artifact
        run: |
          mkdir -p rootfs/image
          tar -C build/rootfs/image  --zstd -xf build/rootfs/image.tar.zst

      - name: Download kernel build artifacts
        uses: actions/download-artifact@v4
        with:
          name: kernel-build
          path: build/

      - name: Install runtime dependencies
        id: apt-vng
        run: |
          sudo apt update && sudo apt install \
            qemu-kvm udev iproute2 qemu-system-x86 python3-requests \
            coreutils libvirt-clients kbd kmod file rsync zstd udev

      - name: Run selftests via virtme-ng
        run: |
          virtme-ng/vng --verbose \
            --root build/rootfs --user root --run build/vmlinuz \
            --rwdir=/mnt=build/kselftest/kselftest_install -- \
              "cd /mnt/mm; ./run_vmtests.sh -t mmap"

      # TODO: Create reproducer command with artifacts
