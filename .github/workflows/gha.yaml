
on: [push]
# TODO: Run build steps in parallel?
# TODO: Automatically update the kernel submodul
name: Linux mm selftests in virtme-ng
jobs:
  test:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code with submodules
        uses: actions/checkout@v4
        with:
          submodules: true

      # Install dependencies for virtme-ng
      - name: Install apt packages
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          # First group is kernel deps. Second is virtme-ng dep.
          # apparmor is for the aa-teardown thing below.
          # WARNING: When you change this, you need to manually update the
          # version field below.
          packages: |
            build-essential libnuma-dev libcap-dev
            ncurses-dev xz-utils libssl-dev bc flex libelf-dev bison

            qemu-kvm udev iproute2 qemu-system-x86 python3-requests
            coreutils libvirt-clients kbd kmod file rsync zstd udev

            apparmor
          version: 3

      - name: Build rootfs
        run: |
          # Enable mkosi to do userns stuff
          # https://github.com/actions/runner-images/issues/10015#issuecomment-2668163375
          sudo systemctl disable --now apparmor.service
          sudo aa-teardown || true

          sudo mkosi/bin/mkosi

      - name: Hash all submodule versions
        id: submodule_hash
        run: |
          git submodule foreach --recursive 'git rev-parse HEAD' \
            | sort | sha256sum | awk '{print $1}' > submodule_hash.txt
          echo "::set-output name=hash::$(cat submodule_hash.txt)"

      # This might seem pointless coz typically we should expect the kernel
      # version to change between runs (otherwise why are we running again?)
      # But it's useful for hacking on this config.
      - name: Cache/restore kernel build
        uses: actions/cache@v4
        with:
          path: build
          key: ${{ runner.os }}-dependencies-${{ steps.submodule_hash.outputs.hash }}

      - name: Build kernel
        run: |
          mkdir build
          make -j mrproper
          ../virtme-ng/vng -b O=$GITHUB_WORKSPACE/build

      - name: Build mm selftests
        run: |
          cd linux
          # -static is a simple way to workaround differences in the shared
          # library environment between host & guest.
          make -j $(( $(nproc) * 2 )) -C tools/testing/selftests \
            TARGETS=mm KDIR=$PWD EXTRA_CFLAGS=-static O=$GITHUB_WORKSPACE/build install

      - name: Run selftests via virtme-ng
        run: |
          virtme-ng/vng --verbose \
            --root ./image/ --user root \
            --run /tmp/build/arch/x86/boot/bzImage
            --rwdir=/mnt=linux/kselftest/kselftest_install --
              "cd /mnt/mm; ./run_vmtests.sh -t mmap"

      # TODO: Create reproducer command with artifacts
