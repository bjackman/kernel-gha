on: [push]
# TODO: Run build steps in parallel?
# TODO: Nice way to reproduce.
# TODO: Document how everything fits together.
# TODO: Add more tests.
# TODO: Parse KTAP and display something more readable using `$GITHUB_STEP_SUMMARY`.
name: Linux mm selftests in virtme-ng
jobs:
  build-rootfs:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code with submodules
        uses: actions/checkout@v4
        with:
          submodules: true
          sparse-checkout: |
            mkosi/
            rootfs/

      - name: Install apt packages for mkosi
        id: apt-mkosi
        run: |
          sudo apt update && sudo apt install apparmor debian-archive-keyring

      - name: Build rootfs
        run: |
          sudo sysctl -w kernel.apparmor_restrict_unprivileged_unconfined=0
          sudo sysctl -w kernel.apparmor_restrict_unprivileged_userns=0

          # Produce the rootfs in build/rootfs
          mkosi/bin/mkosi -C rootfs --output-directory=$PWD

      - name: Upload rootfs artifact
        uses: actions/upload-artifact@v4
        with:
          name: image.tar.zst
          path: image.tar.zst

  build-kernel:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code with submodules
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Hash all submodule versions
        id: submodule_hash
        run: |
          git submodule foreach --recursive 'git rev-parse HEAD' \
            | sort | sha256sum | awk '{print $1}' > submodule_hash.txt
          echo "name=hash::$(cat submodule_hash.txt)" >> $GITHUB_OUTPUT

      # This might seem pointless coz typically we should expect the kernel
      # version to change between runs (otherwise why are we running again?)
      # But it's useful for hacking on this config.
      - name: Cache/restore kernel build
        id: cache-kernel-build
        uses: actions/cache@v4
        with:
          path: kernel.tgz
          key: ${{ runner.os }}-${{ steps.submodule_hash.outputs.hash }}-${{ hashFiles('build.sh') }}

      - name: Install apt packages for kernel build
        if: ${{ steps.cache-kernel-build.outputs.cache-hit != 'true' }}
        run: |
          sudo apt update && sudo apt install \
            build-essential libnuma-dev libcap-dev \
            ncurses-dev xz-utils libssl-dev bc flex libelf-dev bison

      - name: Build
        if: ${{ steps.cache-kernel-build.outputs.cache-hit != 'true' }}
        run: ./build.sh

      - name: Upload kernel artifact
        uses: actions/upload-artifact@v4
        with:
          name: kernel.tgz
          path: kernel.tgz

  test:
    runs-on: ubuntu-24.04
    needs: [build-rootfs, build-kernel]
    steps:
      - name: Checkout virtme-ng
        uses: actions/checkout@v4
        with:
          submodules: true
          sparse-checkout: virtme-ng/

      - name: Download rootfs artifact
        uses: actions/download-artifact@v4
        with:
          name: image.tar.zst

      - name: Download kernel build artifacts
        uses: actions/download-artifact@v4
        with:
          name: kernel.tgz

      - name: Install runtime dependencies
        id: apt-vng
        run: |
          sudo apt update && sudo apt install \
            qemu-kvm udev iproute2 qemu-system-x86 python3-requests \
            coreutils libvirt-clients kbd kmod file rsync zstd udev

      - name: Disable AppArmor noise
        run: |
          sudo sysctl -w kernel.apparmor_restrict_unprivileged_unconfined=0
          sudo sysctl -w kernel.apparmor_restrict_unprivileged_userns=0

      - name: Run selftests via virtme-ng
        run: ./test.sh
